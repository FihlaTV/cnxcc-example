#!KAMAILIO

#!define WITH_NAT 
#!define WITH_ACC 
#!define WITH_MYSQL
#!define WITH_AUTH
#!define WITH_USRLOCDB

#!define FLB_NATB 	6 
#!define FLB_NATSIPPING 7 
#!define FLT_NATS 	5
#!define FLT_OUT 	8

#!define DLG_FLAG 	9
#!define CC_FLAG 	10

#!define DBURL 		"mysql://cnxcc:kw2014@localhost/cnxcc"

include_file "modules.cfg"

listen=udp:107.170.102.188:5070
alias="cnxcc.caruizdiaz.com"

#
# Multimedia telephony configuration parameter
#
mmtel.svr_ip                    = "107.170.102.188" desc "mmtel server IP"
mmtel.svr_port                  = "5080" desc "mmtel port"
mmtel.not_found_rec             = "notfound" desc "not found prerecorded message"
mmtel.congestion_rec            = "congestion" desc "when max amount of channles has been reached"
mmtel.no_answer_rec             = "noanswer" desc "when called party hangs up"
mmtel.invalid_number_rec        = "invalidnumber" desc "invalid number"
mmtel.no_credit_rec             = "nocredit" desc "subscriber has no credit"

#
# Gateways we use to contact the PSTN
#
pstn.gw		     		= "181.40.117.86:5070" desc "PSTN GW Address"


request_route {

	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	if (!is_method("REGISTER|INVITE|ACK|BYE|CANCEL|PRACK|MESSAGE")) {
		sl_send_reply("405", "Method not allowed");
		exit;
	}

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
		record_route_preset("cnxcc.caruizdiaz.com:5070;nat=yes");

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	if (is_method("MESSAGE") && !has_body("text/plain")) {
                sl_send_reply("200", "Ok");
                return;
        }

	if (is_method("MESSAGE") && $rU =~ "service") {
		route(SERVICE_REQUEST);
		exit;
	}

	if (!is_method("INVITE")) {
		route(RELAY);
		exit;
	}

	route(INTERNAL_CALL);

	route(PSTN);
	
}

route[RELAY] {
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

route[INTERNAL_CALL]
{
        if (!($rU =~ "^[123][0-9]{3}$")) { 
                return;
        }

        xlog("L_INFO", "Internal Call from $fU to $rU");

        route(LOCATION);
	exit;
}

route[PSTN] {
	# check if PSTN GW IP is defined
        if (strempty($sel(cfg_get.pstn.gw_ip))) {
                xlog("SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\n");
		sl_send_reply("503", "Internal Server Error");
                return;
        }

	if (!($rU =~ "^\+{0,1}5959[6789][1-6][0-9]{6}$") ||
   	    !($rU =~ "^09[6789][1-6][0-9]{6}$")) {
		route(INVALID_NUMBER);
		return;
        }

	#
	# in case it's a match, we send the call to our PSTN gateway
	#
	$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw);

	route(RELAY);
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			route(DLGURI);
			if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			}
			else if ( is_method("NOTIFY") ) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				record_route();
			}
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					route(RELAY);
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER")) {
		if(isflagset(FLT_NATS)) {
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging 
			## setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

		exit;
	}
}

# USER location service
route[LOCATION] {
	if (!lookup("location")) {
#		$var(rc) = $rc;
		t_newtran();
		switch ($rc) {
			case -1:
			case -3:
				xlog("[$rU] was not found");
				if (!route(CUSTOMER_NOT_FOUND))
					exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	route(RELAY);
	exit;
}


# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH
	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}

#!endif
	return;
}

# Caller NAT detection route
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			add_contact_alias();
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
		return;

	rtpproxy_manage("co");

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			add_contact_alias();
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);
}

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);

	if (t_is_canceled()) {
		exit;
	}
}

route[CUSTOMER_NOT_FOUND] {
#!ifdef WITH_MMTEL
        $ru     = "sip:" + $sel(cfg_get.mmtel.not_found_rec) + 
                        "@" +
                        $sel(cfg_get.mmtel.svr_ip) +
                        ":" + $sel(cfg_get.mmtel.svr_port);
	return 1;
#!else
	sl_send_reply("404", "Not Found");
	return -1;
#!endif
}

route[INVALID_NUMBER] {
#!ifdef WITH_MMTEL
        $ru     = "sip:" + $sel(cfg_get.mmtel.invalid_number_rec) + 
                        "@" +
                        $sel(cfg_get.mmtel.svr_ip) +
                        ":" + $sel(cfg_get.mmtel.svr_port);
	return 1;
#!else
	sl_send_reply("404", "Not Found");
	return -1;
#!endif
}

route[NO_CREDIT] {
#!ifdef WITH_MMTEL
        $ru     = "sip:" + $sel(cfg_get.mmtel.no_credit_rec) + 
                        "@" + 
                        $sel(cfg_get.mmtel.srv_ip) + 
                        ":" + $sel(cfg_get.mmtel.srv_port);
	return 1;
#!else
	sl_send_reply("404", "Not Found");
	return -1;
#!endif
}

route[SEND_SIP_MESSAGE]
{
        xlog("L_INFO", "MESSAGE to [$avp(s:sms_to_subscriber)]: $avp(s:sms_content)");

        $uac_req(method)        = "MESSAGE";

        $uac_req(ruri)          = $avp(subs_uri);
        $uac_req(furi)          = $avp(subs_from);
        $uac_req(turi)          = $avp(subs_to);

        $uac_req(hdrs)          = "Content-Type: text/plain\r\n";
        $uac_req(body)          = $avp(msg_content);

        return uac_req_send();
}

route[AUTHORIZE] {
        $var(ac)        = perl_exec("authorize");

        switch($var(ac)) {
        case 1: # our call was authorized
                xlog("L_INFO", "[$fU]->[$tU] initial_cost=[$avp(initial_cost)], final_cost=[$avp(final_cost)], cost_per_second=[$avp(o_call_cps)]");

                setflag(DLG_FLAG);

                if (!is_method("INVITE"))
                        return;
		#
		# Create subscriber's contact information
		#
                $dlg_var(subs_uri)      = "sip:" + $fU + "@" + $si + ":" + $sp; 
                $dlg_var(subs_from)     = "sip:service@cnxcc.caruizdiaz.com";
                $dlg_var(subs_to)       = "sip:" + $fU + "@" + $si + ":" + $sp;

                $dlg_var(destination)   = $rU;
                $dlg_var(subscriber)    = $fU;

                $dlg_var(i_cost)	= $avp(initial_cost);
                $dlg_var(f_cost)	= $avp(final_cost);
                $dlg_var(cps)		= $avp(o_call_cps);
                $dlg_var(direction)	= "outbound";

                if ($dlg_var(cost_per_second) == 0) {
			#
			# in case is a free-call, we allow them to talk for 15 seconds only, because we are crazy ;)
			# 
                        $dlg_var(billable)	= "no";
                        $var(max_time)          = 15;
                        if (!cnxcc_set_max_time("$dlg_var(subscriber)", "$var(max_time)")) {
				xlog("Failed to setup credit control");
				sl_send_reply("503", "Internal Server Error");
			}
			
                }
                else {
                        $dlg_var(billable)      = "yes";
                        cnxcc_set_max_credit("$dlg_var(subscriber)", "$avp(credit)", "$dlg_var(cost_per_second)", "$dlg_var(i_cost)", "$dlg_var(f_cost)") {
				xlog("Failed to setup credit control");
				sl_send_reply("503", "Internal Server Error");
			}
                }

                return;
        case -1: # we were not authorized because of lack of credit

                $avp(subs_uri)		= "sip:" + $fU + "@" + $si + ":" + $sp; 
                $avp(subs_from)		= "sip:service@sip.sigapy.com";
                $avp(subs_to)		= "sip:" + $fU + "@" + $si + ":" + $sp;
                $avp(msg_to_subscriber)	= $fU;
                $avp(msg_content)	= "SERVICE: you don't have enough credit to place a call. Please consider buying more credit. Thanks";
		
		#
		# notify the user why we rejected his/her call
		#
                route(SEND_SIP_MESSAGE);
                
		if (route(NO_CREDIT))
			route(RELAY);

                exit;   
        case -2:
                sl_send_reply("503", "Oops, something went wrong but we will be back soon. Please try again later or contact me by email to carlos.ruizdiaz@gmail.com");
                exit;
        }
}

route[XMLRPC] {
        # allow XMLRPC from localhost
        if ((method=="POST" || method=="GET")
                        && (src_ip==127.0.0.1)) {
                # close connection only for xmlrpclib user agents (there is a bug in
                # xmlrpclib: it waits for EOF before interpreting the response).
                if ($hdr(User-Agent) =~ "xmlrpclib")
                        set_reply_close();
                set_reply_no_connect();
                dispatch_rpc();
                exit;
        }
        send_reply("403", "Forbidden");
        exit;
}

event_route[cnxcc:call-shutdown]
{
        $var(duration)  = $TS - $dlg(start_ts);

        xlog("L_INFO", "[$dlg_var(subscriber)]->[$dlg_var(destination)]: Call killed after [$var(duration)] sec(s)");

        perl_exec("bill_call", $var(duration));

        $avp(subs_uri		= $dlg_var(subs_uri); 
        $avp(subs_from)       	= $dlg_var(subs_from);
        $avp(subs_to)         	= $dlg_var(subs_to);

        $avp(msg_to_subscriber)	= $dlg_var(subscriber);
        $avp(msg_content)       = "SERVICE: You ran out of credit, please buy some ;-). Thanks!";

        route(SEND_SIP_MESSAGE);

        unforce_rtp_proxy();
}

route[BILL_CALL]
{
        $var(duration)  = $DLG_lifetime;

        xlog("L_INFO", "[$dlg_var(subscriber)]->[$dlg_var(destination)]: Billable [$dlg_var(billable)] Duration [$var(duration)]");

        perl_exec("bill_call", $var(duration));
}

event_route[dialog:failed]
{
        route(BILL_CALL);
}

event_route[dialog:end]
{
        route(BILL_CALL);
}

route[SERVICE_REQUEST]
{
	# reply to the MESSAGE to avoid re-transmissions 
        sl_send_reply("200", "Ok");

        $avp(subs_uri)	= "sip:" + $fU + "@" + $si + ":" + $sp; 
        $avp(subs_from)	= "sip:" + $rU + "@sip.sigapy.com";
        $avp(subs_to)	= "sip:" + $fU + "@" + $si + ":" + $sp;

        $avp(msg_to_subscriber) 	= $fU;

        if ($rb =~ "credit|Credit|CREDIT") {
                perl_exec("get_subscriber_credit");
                $avp(msg_content)     = "You have a credit of " + $avp(credit) + " US$";
        }
        else {
                $avp(msg_content)     = "\"" + $rb + "\" is not recognized as a valid service request!";
        }

        route(SEND_SIP_MESSAGE);

        exit;
}
